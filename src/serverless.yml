plugins:
  - serverless-offline
  - serverless-python-requirements

service: template-service
provider:
  name: aws
  runtime: python3.12
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'development'}
  deploymentPrefix: serverless

custom:
  pythonRequirements:
    fileName: poetry.lock
    requirePoetryLockFile: false
  baseVersion: v1
  defaultVPC:
    securityGroupIds:
      - ${file(./config.${self:provider.stage}.json):SG1}
      - ${file(./config.${self:provider.stage}.json):SG2}
    subnetIds:
      - ${file(./config.${self:provider.stage}.json):VPC1}
      - ${file(./config.${self:provider.stage}.json):VPC2}
  defaultCORS:
    origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
    allowCredentials: true
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - x-requested-with
      - x-refresh-token

functions:

  get-organization:
    handler: application/handler/organization_handler.get_organization
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVPC}
    events:
      - http:
          authorizer: ${file(./config.${self:provider.stage}.json):AuthorizerARN}
          method: GET
          path: ${self:custom.baseVersion}/organization/{organization_id}
          cors: ${self:custom.defaultCORS}

  create-organization:
      handler: application/handler/organization_handler.create_organization
      role: ${file(./config.${self:provider.stage}.json):ROLE}
      vpc: ${self:custom.defaultVPC}
      events:
        - http:
            authorizer: ${file(./config.${self:provider.stage}.json):AuthorizerARN}
            method: POST
            path: ${self:custom.baseVersion}/organization
            cors: ${self:custom.defaultCORS}